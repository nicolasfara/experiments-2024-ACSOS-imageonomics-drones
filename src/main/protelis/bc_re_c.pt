/* Based on "Online Multi-object k-coverage with Mobile Smart Cameras" by Lukas Esterle and Peter Lewis.
 * Replicates the BC-RE algorithm, aka Broadcast-Received calls.
 * Each camera broadcasts requests for each target and provisions the one with the least requests in case it is not already
 * following a target.
 *
 * In case there are multiple targets with the least requests number, then the closest one is chosen.
 */

module bc_re_c
import protelis:lang:utils
import protelis:coord:spreading
import protelis:coord:accumulation
import it.unibo.experiment.clustering.HerdExperimentUtils.clustersWithLeastSources
import it.unibo.experiment.clustering.HerdExperimentUtils.getClusters
import it.unibo.experiment.clustering.HerdExperimentUtils.getVisibleCentroids
import it.unibo.experiment.clustering.HerdExperimentUtils.getVisibleClusters
import it.unibo.experiment.clustering.HerdExperimentUtils.isPointVisible
import utils
import clustering:utils_c
import exploration_strategies


rep(myTarget <- emptyCluster()) {
    let localTargets = getLocalTargets()
    let allTargets = foldUnion(nbr(localTargets))

    let clusters = getClusters(allTargets, getClusteringDistance())
    env.put("Clusters", clusters) // Used by GUI to draw the clusters
    let visibleCentroids = tupleOf(getVisibleClusters(clusters))
    let allVisibleCentroids = nbr(visibleCentroids)

    let possibleTarget = closestCluster(clustersWithLeastSources(allVisibleCentroids))
    let newTarget = if(myTarget == emptyCluster() || !isPointVisible(myTarget.getCentroid())) {
        possibleTarget
    } else {
        closestCluster(visibleCentroids) // updated position
    }

    followOrExploreCluster(newTarget, fieldExploration)
    avoidCameraCollisionForClusters(newTarget)
    newTarget
}
