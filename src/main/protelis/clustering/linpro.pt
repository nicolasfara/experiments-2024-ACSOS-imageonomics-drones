module clustering:linpro
import protelis:lang:utils
import protelis:coord:spreading
import protelis:coord:accumulation
import it.unibo.experiment.clustering.HerdExperimentUtils.getClusterSolver
import it.unibo.experiment.clustering.HerdExperimentUtils.getAssignedNodes
import it.unibo.experiment.clustering.HerdExperimentUtils.getClusters

import utils
import clustering:utils_c
import clustering:adaptive_clustering


public def linpro(is_fair, is_clustering_adaptive, explorationStrategy) =
    rep(solver <- getClusterSolver()) {
        let localVisibleNodes = getLocalTargets()
        let allVisible = foldUnion(nbr(localVisibleNodes))
        let cameras = nbr(getCenterOfFov())

        let clusters = getClusters(allVisible, getClusteringDistance())
        env.put("Clusters", clusters) // Used by GUI to draw the clusters
        let assignedClusters = solver.solve(cameras, clusters, getMaxCamerasPerTarget(), is_fair)
        let myCluster = assignedClusters.getOrDefault(getUID(), emptyCluster())

        followOrExploreCluster(myCluster, explorationStrategy)
        avoidCameraCollisionForClusters(myCluster)

        if(is_clustering_adaptive){
            let assignedNodes = getAssignedNodes(assignedClusters, clusters)
            env.put("ClusteringDistance", getNewClusteringDistance(myCluster, localVisibleNodes, assignedNodes))
        }else{ 0 } 
        solver
    }